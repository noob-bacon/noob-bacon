-- Define global variables to avoid errors
local serverId = nil
local mapName = nil
    local function GetTimer()
        return os.clock()
    end
-- Get server list and find server created by the LocalPlayer
local returnValue = game:GetService("ReplicatedStorage").Remotes.Server.GetServers:InvokeServer()

for i, v in pairs(returnValue) do
    if v.creator == game:GetService("Players").LocalPlayer then
        print(i)
        serverId = i
    end
end

-- Equip or buy a unit
function Loadout(unit)
    local player = game:GetService("Players").LocalPlayer

    if not player.BoughtUnits:FindFirstChild(unit) then
        warn("Unit not found: " .. tostring(unit))
        return
    end

    if not player.UnitsEquipped:FindFirstChild(unit) then
        if player.BoughtUnits[unit].Value ~= false then
            local args = {
                [1] = unit
            }
            game:GetService("ReplicatedStorage").Remotes.Unit.EquipUnit:InvokeServer(unpack(args))
        else
            local args = {
                [1] = unit
            }
            game:GetService("ReplicatedStorage").Remotes.Unit.BuyUnit:InvokeServer(unpack(args))
        end
    end
end

-- Set the map name
function Map(map)
    mapName = map
end

-- Create and start a server if in the correct place
if game.PlaceId == 6198192195 then
    if not mapName then
        warn("MapName is not defined")
    else
        local argsCreate = {
            [1] = mapName,
            [2] = 1,
            [3] = "Survival",
            [4] = "Private"
        }

        game:GetService("ReplicatedStorage").Remotes.Server.CreateServer:InvokeServer(unpack(argsCreate))
        task.wait()

        if not serverId then
            warn("Server ID is not defined")
        else
            local argsStart = {
                [1] = serverId
            }
            game:GetService("ReplicatedStorage").Remotes.Server.StartServer:InvokeServer(unpack(argsStart))
        end
    end
else
    -- Place a tower
    function Place(tower, ground, position, timer, wave)
        local towerInstance = game:GetService("ReplicatedStorage").Structures.Troops:FindFirstChild(tower)
        if not towerInstance then
            warn("Tower not found: " .. tostring(tower))
            return
        end

        local targetTime = timer
        repeat
            task.wait()
        until GetTimer() >= targetTime and game:GetService("ReplicatedStorage").Game.Wave.Value >= wave

        local args = {
            [1] = towerInstance,
            [2] = ground,
            [3] = Ray.new(Vector3.new(position[1], position[2], position[3]), Vector3.new(0, -1, 0)),
            [4] = 0
        }

        game:GetService("ReplicatedStorage").Remotes.Placement.Place:InvokeServer(unpack(args))
    end

    -- Upgrade a tower
    function Upgrade(tower, timer, wave)
        local targetTime = timer
        repeat
            task.wait()
        until GetTimer() >= targetTime and game:GetService("ReplicatedStorage").Game.Wave.Value >= wave

        local args = {
            [1] = tower
        }

        game:GetService("ReplicatedStorage").Remotes.Upgrade.UpgradeUnit:InvokeServer(unpack(args))
    end

    -- Sell a tower
    function SellTower(tower, timer)
        local targetTime = timer
        repeat
            task.wait()
        until GetTimer() >= targetTime

        local args = {
            [1] = tower
        }

        game:GetService("ReplicatedStorage").Remotes.Sell.SellUnit:InvokeServer(unpack(args))
    end
end
end
